
// 1. Basic DOM Access
const element = document.getElementById('myId');
const elements = document.getElementsByClassName('myClass');
const tags = document.getElementsByTagName('div');
const el = document.querySelector('.myClass');
const allEls = document.querySelectorAll('div');

// 2. Input Fields
const value = document.getElementById('inputId').value;
document.getElementById('inputId').value = 'New Value';

// 3. Simple Button Click
function handleClick() {
  alert('Button clicked!');
}

// 4. Extract Part of a String (like NIC)
const nic = "199012345678";
const birthYear = nic.length === 12 ? nic.substring(0, 4) : "Invalid";

// 5. Calculate Age From NIC
function calculateAgeFromNIC(nic) {
  let year = '';
  if (nic.length === 10) {
    year = '19' + nic.substring(0, 2);
  } else if (nic.length === 12) {
    year = nic.substring(0, 4);
  } else {
    return 'Invalid NIC';
  }
  const currentYear = new Date().getFullYear();
  return currentYear - parseInt(year);
}

// 6. If-Else Condition
if (age >= 18) {
  console.log('Adult');
} else {
  console.log('Minor');
}

// 7. Loops
for (let i = 0; i < 5; i++) {
  console.log(i);
}

const arr = [1, 2, 3];
arr.forEach(item => console.log(item));

// 8. Arrays
const fruits = ['apple', 'banana', 'cherry'];
fruits.push('orange');
fruits.pop();
console.log(fruits[1]);

// 9. Objects
const user = {
  name: 'John',
  age: 30
};
console.log(user.name);
console.log(user['age']);

// 10. Event Listeners
const button = document.getElementById('myButton');
button.addEventListener('click', () => {
  alert('Clicked!');
});

// 11. Date and Time
const today = new Date();
console.log(today.getFullYear());
console.log(today.getMonth() + 1);
console.log(today.getDate());

// 12. Simple Form Validation
function validateForm() {
  const email = document.getElementById('email').value;
  if (email === "") {
    alert("Email is required!");
    return false;
  }
  return true;
}

// 13. Set Timeout / Interval
setTimeout(() => {
  console.log('Hello after 2 seconds');
}, 2000);

setInterval(() => {
  console.log('Repeating every 3 seconds');
}, 3000);

// 14. JSON Parse and Stringify
const obj = { name: 'John', age: 30 };
const jsonString = JSON.stringify(obj);
const parsedObj = JSON.parse(jsonString);

// 15. Shortcuts
parseInt('123');
Number('123');
'hello'.toUpperCase();
'HELLO'.toLowerCase();
arr.includes('apple');
arr.find(x => x === 'apple');
const copiedArray = [...arr];

// 16. NIC and Age Full Example
function getAge() {
  const nic = document.getElementById('nicInput').value.trim();
  let year = '';
  if (nic.length === 10) {
    year = '19' + nic.substring(0, 2);
  } else if (nic.length === 12) {
    year = nic.substring(0, 4);
  } else {
    document.getElementById('result').innerText = "Invalid NIC format!";
    return;
  }
  const currentYear = new Date().getFullYear();
  const age = currentYear - parseInt(year);
  document.getElementById('result').innerText = `Age: ${age}`;
}











// 17. Promises
const promise = new Promise((resolve, reject) => {
  let success = true;
  if (success) {
    resolve('Success!');
  } else {
    reject('Error!');
  }
});

promise.then(result => console.log(result)).catch(error => console.error(error));

// 18. Fetch API
fetch('https://jsonplaceholder.typicode.com/posts')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error fetching data:', error));

// 19. Async / Await
async function fetchData() {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error('Error:', error);
  }
}

// 20. LocalStorage and SessionStorage
localStorage.setItem('username', 'JohnDoe');
const user = localStorage.getItem('username');
localStorage.removeItem('username');

sessionStorage.setItem('sessionName', 'SessionUser');
const sessionUser = sessionStorage.getItem('sessionName');
sessionStorage.clear();

// 21. Try-Catch Error Handling
try {
  let result = riskyFunction();
} catch (error) {
  console.error('Something went wrong:', error);
}

// 22. Classes
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
  greet() {
    console.log(`Hello, my name is ${this.name}`);
  }
}

const person1 = new Person('Alice', 25);
person1.greet();

// 23. Modules (Simple Example)
// export function sayHello() { console.log('Hello!'); }
// import { sayHello } from './module.js';

// 24. Template Literals
const name = 'John';
console.log(`Hello, ${name}!`);

// 25. Spread and Rest Operators
const nums = [1, 2, 3];
const nums2 = [...nums, 4, 5];
console.log(nums2);

function sum(...numbers) {
  return numbers.reduce((a, b) => a + b, 0);
}
console.log(sum(1, 2, 3, 4));

// 26. Destructuring
const userInfo = { firstName: 'John', lastName: 'Doe' };
const { firstName, lastName } = userInfo;
console.log(firstName, lastName);

const [first, second] = ['a', 'b', 'c'];
console.log(first, second);

// 27. String Methods
const text = ' JavaScript ';
console.log(text.trim());
console.log(text.includes('Script'));
console.log(text.startsWith(' Java'));
console.log(text.endsWith(' '));

// 28. Math Functions
console.log(Math.floor(4.7));
console.log(Math.ceil(4.3));
console.log(Math.round(4.5));
console.log(Math.random()); // Between 0 and 1

// 29. Useful Array Methods
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map(x => x * 2);
const evens = numbers.filter(x => x % 2 === 0);
const total = numbers.reduce((acc, curr) => acc + curr, 0);
console.log(doubled, evens, total);

// 30. Browser APIs
alert('This is an alert!');
const confirmed = confirm('Are you sure?');
const userInput = prompt('Enter your name:');

// 31. Redirecting
window.location.href = 'https://www.google.com';

// 32. Prevent Default Form Submission
document.getElementById('myForm').addEventListener('submit', function(e) {
  e.preventDefault();
  console.log('Form submitted manually');
});

// 33. Dynamically Create Elements
const newDiv = document.createElement('div');
newDiv.innerText = 'Hello World';
document.body.appendChild(newDiv);

// 34. Toggle Classes
const box = document.getElementById('box');
box.classList.toggle('active');

// 35. Clipboard Copy
function copyText() {
  const text = document.getElementById('copyInput').value;
  navigator.clipboard.writeText(text)
    .then(() => alert('Copied!'))
    .catch(err => console.error('Error copying:', err));
}

// 36. Debounce Function
function debounce(func, delay) {
  let debounceTimer;
  return function() {
    const context = this;
    const args = arguments;
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(() => func.apply(context, args), delay);
  };
}

// 37. Throttle Function
function throttle(func, limit) {
  let inThrottle;
  return function() {
    const args = arguments;
    const context = this;
    if (!inThrottle) {
      func.apply(context, args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  }
}


-- 🗂️ SQL COMMAND SHEET — Essentials for Working with Tables and Data

-- 1. CREATE, ALTER, DROP TABLES

CREATE TABLE users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE,
    role VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE users ADD phone VARCHAR(20);
ALTER TABLE users MODIFY email VARCHAR(150);
ALTER TABLE users DROP COLUMN phone;

RENAME TABLE old_name TO new_name;
ALTER TABLE users RENAME COLUMN old_col TO new_col;

DROP TABLE users;

-- 2. INSERT, UPDATE, DELETE DATA

INSERT INTO users (name, email, role)
VALUES ('Alice', 'alice@example.com', 'member');

UPDATE users
SET role = 'admin'
WHERE user_id = 1;

DELETE FROM users WHERE user_id = 1;

-- 3. SELECT & FILTER DATA

SELECT * FROM users;
SELECT name, email FROM users;
SELECT * FROM users WHERE role = 'trainer';
SELECT * FROM users WHERE role = 'staff' AND email LIKE '%@gmail.com';
SELECT * FROM users ORDER BY name ASC;
SELECT * FROM users LIMIT 5;

-- 4. JOINING TABLES

SELECT u.name, t.specialty
FROM users u
JOIN trainer t ON u.user_id = t.user_id;

SELECT u.name, a.member_id
FROM users u
LEFT JOIN assigned_trainer a ON u.user_id = a.trainer_id;

SELECT t.trainer_id, u.name
FROM trainer t
RIGHT JOIN users u ON u.user_id = t.user_id;

-- 5. AGGREGATE FUNCTIONS

SELECT COUNT(*) FROM users WHERE role = 'member';
SELECT AVG(price) FROM membership_plans;
SELECT MIN(created_at) FROM users;

SELECT role, COUNT(*) AS count
FROM users
GROUP BY role;

SELECT role, COUNT(*) 
FROM users 
GROUP BY role
HAVING COUNT(*) > 2;

-- 6. DATE & TIME OPERATIONS

SELECT NOW();

SELECT * FROM users 
WHERE created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY);

INSERT INTO logs (event_date) VALUES ('2023-01-01');

-- 7. INTROSPECTING TABLES

DESCRIBE users;
SHOW TABLES;
SHOW CREATE TABLE users;
SELECT DATABASE();


--- DATABASE OPERATIONS ---
CREATE DATABASE db_name;
DROP DATABASE db_name;
USE db_name;

--- TABLE OPERATIONS ---
CREATE TABLE table_name (
column1 datatype constraints,
column2 datatype constraints,
...
);
DROP TABLE table_name;
TRUNCATE TABLE table_name;

--- COLUMN OPERATIONS ---
ALTER TABLE table_name ADD COLUMN column_name datatype;
ALTER TABLE table_name DROP COLUMN column_name;
ALTER TABLE table_name MODIFY COLUMN column_name new_datatype;
ALTER TABLE table_name RENAME COLUMN old_name TO new_name;

--- CRUD OPERATIONS ---
INSERT INTO table_name (col1, col2) VALUES (val1, val2);
SELECT * FROM table_name;
SELECT col1, col2 FROM table_name WHERE condition;
UPDATE table_name SET col1 = val1 WHERE condition;
DELETE FROM table_name WHERE condition;

--- FILTERING ---
SELECT * FROM table_name WHERE col1 = value;
SELECT * FROM table_name WHERE col1 > value;
SELECT * FROM table_name WHERE col1 BETWEEN val1 AND val2;
SELECT * FROM table_name WHERE col1 IN (val1, val2);
SELECT * FROM table_name WHERE col1 LIKE 'pattern%';
SELECT * FROM table_name WHERE col1 IS NULL;

--- JOINS ---
SELECT * FROM table1 INNER JOIN table2 ON table1.col = table2.col;
SELECT * FROM table1 LEFT JOIN table2 ON table1.col = table2.col;
SELECT * FROM table1 RIGHT JOIN table2 ON table1.col = table2.col;
SELECT * FROM table1 FULL OUTER JOIN table2 ON table1.col = table2.col;
SELECT * FROM table1 CROSS JOIN table2;
SELECT a.col, b.col FROM table1 a, table1 b WHERE a.id = b.foreign_id;

--- AGGREGATION ---
SELECT COUNT() FROM table_name;
SELECT SUM(col1) FROM table_name;
SELECT AVG(col1) FROM table_name;
SELECT MIN(col1) FROM table_name;
SELECT MAX(col1) FROM table_name;
SELECT col1, COUNT() FROM table_name GROUP BY col1;
SELECT col1, COUNT() FROM table_name GROUP BY col1 HAVING COUNT() > 5;

--- CONSTRAINTS ---
CREATE TABLE table_name (
id INT PRIMARY KEY,
col1 VARCHAR(50) NOT NULL,
col2 INT UNIQUE,
col3 INT DEFAULT 0,
col4 INT CHECK (col4 > 0),
col5 INT REFERENCES other_table(id)
);
ALTER TABLE table_name ADD PRIMARY KEY (id);
ALTER TABLE table_name ADD UNIQUE (col1);
ALTER TABLE table_name ADD FOREIGN KEY (col1) REFERENCES other_table(col);
ALTER TABLE table_name ADD CHECK (col1 > 0);

--- INDEXES ---
CREATE INDEX index_name ON table_name (column1, column2);
CREATE UNIQUE INDEX index_name ON table_name (column1);
DROP INDEX index_name;

--- TRANSACTIONS ---
BEGIN TRANSACTION;
-- SQL statements
COMMIT;
-- or
ROLLBACK;

--- COMMON FUNCTIONS ---
-- String Functions
CONCAT(str1, str2)
SUBSTRING(str, start, length)
UPPER(str)
LOWER(str)
TRIM(str)
LENGTH(str)
REPLACE(str, old, new)

-- Date Functions
NOW()
CURDATE()
CURTIME()
DATE_FORMAT(date, format)
DATEDIFF(date1, date2)
DATE_ADD(date, INTERVAL expr unit)

-- Numeric Functions
ROUND(num, decimals)
CEIL(num)
FLOOR(num)
ABS(num)
MOD(num, divisor)
RAND()

--- VIEWS & PROCEDURES ---
CREATE VIEW view_name AS SELECT columns FROM tables WHERE conditions;
DROP VIEW view_name;
CREATE PROCEDURE procedure_name(parameters) BEGIN -- SQL statements END;
CALL procedure_name(arguments);
DROP PROCEDURE procedure_name;
